---
#
# Following variables must be provided:
# - participant_email
# - participant_id
# - participant_details
# - initiator_email
# - testname


- name:
  hosts: localhost
  connection: local
  tasks:

    - name: Get current time
      setup:
        filter: "ansible_date_time"


    - name: Set the stack name
      set_fact:
        stack_name: "Li9ExamSystem-{{ ansible_date_time.iso8601_basic_short }}"
        student_name: "student"


    - name: Generator random password
      command: openssl rand -base64 12
      register: student_pass_tmp


    - name: Normalize participant password
      set_fact:
        student_pass: "{{ student_pass_tmp.stdout }}"


    - name: "Run stack {{ stack_name }} and add the created VM into internal inventory"
      block:

        - name: Deploy Dos ansible cloudformation stack
          cloudformation:
            stack_name: "{{ stack_name }}"
            state: "present"
            region: "{{ region_name }}"
            disable_rollback: true
            template: "files/cloudformation-template.template"
            template_parameters:
              KeyName: "{{ instancekeypair }}"
              EC2InstanceType: "{{ instancetype }}"
              User: "{{ student_name }}"
              Password: "{{ student_pass }}"
              VolumeSize: "{{ disksize }}"

        - name: we have to collect some facts from cloudformations stack
          cloudformation_facts:
            stack_name: "{{ stack_name }}"
            region: "{{ region_name }}"
            all_facts: true
          register: my_stack
  
        - name: it is output of cloudformations instalation
          debug:
            msg: "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs }}"
  
        - name: it is our VM ip
          debug:
            msg: "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs.TestServerIp }}"
  
        - name: adding tower_host to our VM inventory
          tower_host:
            description: "From AWS stack {{ stack_name }}"
            name: "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs.TestServerIp }}"
            inventory: "{{ playbookvminventoryname }}"
            tower_verify_ssl: no
            state: present
  
        - debug:
            msg: "our inventnmame {{ playbookvminventoryname }}"
  
        - name: Wait until SSH is available
          wait_for:
            host: "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs.TestServerIp }}"
            port: 22
            delay: 30
            timeout: 320
            state: started
          delegate_to: localhost

        - name: Call Job for performing post-tasks (configure for a particular exam)
          include_tasks: "included_tasks/tower_client.yml"
          vars:
            job_template_name: "{{ job_templates.postconfig.name }}"
            tower_action: "job_launch"
            tower_job_url: "{{ job_templates.postconfig.endpoint }}"
            job_extra_vars:
              extra_vars:
                participant_id: "{{ participant_id | default('') }}"
                participant_details: "{{ participant_details | default('') }}"
                participant_email: "{{ participant_email | default(useremailnotifications) }}"
                initiator_email: "{{ initiator_email }}"
                useremailnotifications: "{{ useremailnotifications }}"
                testname: "{{ testname }}"
                stack_name: "{{ stack_name }}"
                vmhostip: "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs.TestServerIp }}"
                student_name: "{{ student_name }}"
                student_pass: "{{ student_pass }}"
                exam_length_seconds: "{{ exam_length_seconds }}"

      rescue:

        - name: Something went wrong. Clean up resources
          include_tasks: "included_tasks/remove_aws_stack.yml"
          vars:
            send_notify_email: true
            bad_situation: true
            mail_subject: "Deploy failed, check logs"
            mail_message: "The deploy playbook failed."
 
