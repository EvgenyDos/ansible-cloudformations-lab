---
  - name:
    hosts: "{{ vmhostip }}"
    gather_facts: false
    tasks:

    - name: Run normal tasks
      block:

        - shell: usermod -s /sbin/nologin {{ student_name }}


        - name: Rebooting the examinating instance
          reboot:


        - name: Downloading installer of goss
          get_url:
            url: "https://goss.rocks/install"
            dest: "/root/install"
            mode: "+x"
            force: yes


        - name: Configuring Goss on the instance
          shell: "{{ item }}"
          loop:
            - "/root/install"


        - name: Create a directory for Goss configs
          file:
            path: /root/goss.d
            state: directory


        - name: Copy main config file
          copy:
            dest: "/root/goss.d/{{ item.key }}.yaml"
            src: "{{ exam_tasks.rootpath }}/{{ item.value.selected_task_path }}/goss.yaml"
          with_dict: "{{ exam_tasks.topics }}"


        - name: Copy Goss scripts
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: "+x"
          loop:
            - { src: "files/goss-results.sh", dest: "/root/goss-results.sh" }
            - { src: "files/goss-ssh-results.sh", dest: "/root/goss-ssh-results.sh" }


        - name: Install Goss and run it
          shell: |
            /root/goss-ssh-results.sh 
            /root/goss-results.sh


        - name: Grab the Goss results
          shell: cat /root/results.txt
          ignore_errors: True
          register: bodymailreport


        - name: Send an email with results
          include_tasks: included_tasks/send_email.yml
          vars:
            mail_subject: "Test results"
            mail_body: |
              Dear {{ initiator_email }}, 

              This is a technical report about the exam:
              
              - email: "{{ participant_email }}"
              - ref_id: "{{ participant_id }}"
              - exam: "{{ testname }}"
              - details: "{{ participant_details }}"
     

              There is technical details:

              {{ bodymailreport.stdout }}

              Yours,
              Li9 Exam System.
            body_content_format: plain


        - name: Send an email to user that cloudformation is done
          include_tasks: included_tasks/send_email.yml
          vars:
            mail_subject: "Your exam-time has been ended"
            send_to: "{{ useremailnotifications }}"
            body_content_format: plain
            mail_body: |  
              Your exam-time has been ended.
              We will check the results of exam and contact to you soon.
              Thanks for your time and have a nice day.


        - name: cloudformation stack down
          cloudformation:
            stack_name: "{{ stack_name }}"
            state: "absent"
            region: "{{ region_name }}"
            disable_rollback: true
          become: false
          connection: local
          delegate_to: localhost

        - debug:
            msg: vmhostip is "{{ vmhostip }}"

      rescue:
        
        - name: Something went wrong. Clean up resources
          include_tasks: "included_tasks/remove_aws_stack.yml"
          vars: 
            send_notify_email: true
            bad_situation: true
            mail_subject: "Scoring failed, check logs"
            mail_message: "The scoring playbook failed."

