---
- name: Install Pip package
  package:
    name: python2-pip.noarch
    state: present


- name: Install Markdown2 pip module
  pip:
    name: "markdown2"



- name: Getting a more convinient time format, if previous task get successful
  # We wrap getting world time into a block-rescue section
  # in case of if online time is not available
  # the user will be just informed with duration time
  block:

    - name: Obtain a world time from http://worldtimeapi.org/api/timezone/America/New_York
      uri:
        url: "http://worldtimeapi.org/api/timezone/America/New_York"
        method: GET
        body_format: json
        return_content: true
        status_code: 200
      register: start_time_text

    - name: Doing some conversions of time and calculations
      set_fact:
        datetime_extended_format: true

    - name: Set curr_worldtime
      set_fact:
        curr_worldtime: "{{ start_time_text.json }}"

    - name: Set expire_unixtime
      set_fact:
        expire_unixtime: "{{ curr_worldtime['unixtime'] | int + examtime | int }}"

    - name: Get a printable time of begin of the exam
      shell: |
        date -d @{{ curr_worldtime.unixtime }}
      environment:
        TZ: America/New_York
      register: exam_time_begin

    - name: Get a printable time of end of the exam
      shell: |
        date -d @{{ expire_unixtime }}
      environment:
        TZ: America/New_York
      register: exam_time_end

  rescue:

    - name: Doing some calculations and setings some facts
      set_fact:
        datetime_extended_format: false


- name: Copy parts of the message to the managed host
  template:
    src: "templates/{{ item }}.j2"
    dest: "/tmp/{{ item }}"
  vars:
    css_style_file: "files/tasks-css.html"
  loop:
    - "mail-header.html"
    - "mail-footer.html"
    - "mail-body.md"


- name: Render HTML from Markdown
  shell: "{{ item }}"
  loop:
    - "markdown2 /tmp/mail-body.md > /tmp/mail-body.html && rm -f /tmp/mail-body.md"
    - "cat /tmp/{mail-header.html,mail-body.html,mail-footer.html} > /tmp/mail.html"


- name: Get the rendered mail message to localhost (just for debug)
  fetch:
    src: "/tmp/mail.html"
    dest: "~/tmp/final-mailbody.html"


- name: Get email into a variable
  shell: "cat /tmp/mail.html"
  register: email


- name: Include mail sender to send the mail
  include_tasks: send_email.yml
  vars:
    mail_subject: 'Exam "{{ exam_tasks.content.title }}" has been started'
    mail_body: "{{ email.stdout }}"
    send_to: "{{ useremailnotifications }}"
    body_content_format: html
  when: useremailnotifications is defined
  ignore_errors: true

